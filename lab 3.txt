LAB 3

// EARLIEST DEADLINE FIRST

#include <stdio.h>
#define MAX_TASKS 100
typedef struct
{
int task_id;
int arrival_time;
int execution_time;
int deadline;
int is_completed;
} Task;

float calculate_cpu_utilization(Task process[], int n)
{
float total_utilization = 0.0;
for (int i = 0; i < n; i++)
{
float task_utilization = (float)process[i].execution_time / process[i].deadline;
total_utilization += task_utilization;
}
float cpu_utilization = total_utilization * 100;
return cpu_utilization;
}
int main()
{
int n, i;
printf("Enter the number of processes: ");
scanf("%d", &n);
Task process[MAX_TASKS];
// Read task details
for (i = 0; i < n; i++)
{
printf("Process %d\n", i + 1);
printf("Enter execution time: ");
scanf("%d", &process[i].execution_time);
printf("Enter deadline: ");
scanf("%d", &process[i].deadline);
process[i].task_id = i + 1;
process[i].is_completed = 0;
}
// Calculate CPU utilization
float cpu_utilization = calculate_cpu_utilization(process, n);
printf("CPU Utilization: %.2f%%\n", cpu_utilization);
return 0;
}

 


// RATE MONOTONIC

#include<stdio.h>

#define MAX_TASKS 100
typedef struct {
 int p_id;
 int period;
 int execution_time;
 int deadline;
} Process;
float calculate_cpu_utilization(Process tasks[], int n) {
 float total_utilization = 0.0;
 for (int i = 0; i < n; i++) {
 float task_utilization = (float)tasks[i].execution_time / tasks[i].period;
 total_utilization += task_utilization;
 }
 float cpu_utilization = total_utilization * 100;
 return cpu_utilization;
}
void rate_monotonic()
{
 int n, i;
 printf("Enter the number of processes: ");
 scanf("%d", &n);
 Process tasks[MAX_TASKS];
 // Read process details
 for (i = 0; i < n; i++) {
 printf("Process %d\n", i + 1);
 printf("Enter period: ");
 scanf("%d", &tasks[i].period);
 printf("Enter execution time: ");
 scanf("%d", &tasks[i].execution_time);
 printf("Enter deadline: ");
 scanf("%d", &tasks[i].deadline);
 tasks[i].p_id = i + 1;
 }
 // Calculate CPU utilization
 float cpu_utilization = calculate_cpu_utilization(tasks, n);
 printf("CPU Utilization: %.2f%%\n", cpu_utilization);
}
int main() {
 int i,ch;
 while(1)
 {
 printf("MENU\n");

 printf("1.Rate Monotonic\n2.Exit\n");
 scanf("%d",&ch);
 switch(ch)
 {
 case 1: rate_monotonic();
 break;
 case 2: exit(0);
 default: printf("\nWrong Choice!!Try Again");
 }
 }
 return 0;
}

 



